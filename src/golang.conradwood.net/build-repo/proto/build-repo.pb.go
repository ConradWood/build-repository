// Code generated by protoc-gen-go.
// source: proto/build-repo.proto
// DO NOT EDIT!

/*
Package buildrepo is a generated protocol buffer package.

It is generated from these files:
	proto/build-repo.proto

It has these top-level messages:
	CreateBuildRequest
	CreateBuildResponse
	UploadSlotRequest
	UploadSlotResponse
	UploadDoneRequest
	UploadDoneResponse
	RepoEntry
	ListReposRequest
	ListReposResponse
	ListBranchesRequest
	ListBranchesResponse
	ListVersionsRequest
	ListVersionsResponse
	ListFilesRequest
	ListFilesResponse
*/
package buildrepo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// import "google/protobuf/empty.proto";
// import "google/protobuf/duration.proto";
// import "examples/sub/message.proto";
// import "examples/sub2/message.proto";
// import "google/protobuf/timestamp.proto";
type CreateBuildRequest struct {
	Repository string `protobuf:"bytes,1,opt,name=Repository,json=repository" json:"Repository,omitempty"`
	CommitID   string `protobuf:"bytes,2,opt,name=CommitID,json=commitID" json:"CommitID,omitempty"`
	Branch     string `protobuf:"bytes,3,opt,name=Branch,json=branch" json:"Branch,omitempty"`
	BuildID    uint64 `protobuf:"varint,4,opt,name=BuildID,json=buildID" json:"BuildID,omitempty"`
	CommitMSG  string `protobuf:"bytes,5,opt,name=CommitMSG,json=commitMSG" json:"CommitMSG,omitempty"`
}

func (m *CreateBuildRequest) Reset()                    { *m = CreateBuildRequest{} }
func (m *CreateBuildRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateBuildRequest) ProtoMessage()               {}
func (*CreateBuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateBuildRequest) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *CreateBuildRequest) GetCommitID() string {
	if m != nil {
		return m.CommitID
	}
	return ""
}

func (m *CreateBuildRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *CreateBuildRequest) GetBuildID() uint64 {
	if m != nil {
		return m.BuildID
	}
	return 0
}

func (m *CreateBuildRequest) GetCommitMSG() string {
	if m != nil {
		return m.CommitMSG
	}
	return ""
}

type CreateBuildResponse struct {
	BuildStoreid string `protobuf:"bytes,1,opt,name=BuildStoreid,json=buildStoreid" json:"BuildStoreid,omitempty"`
}

func (m *CreateBuildResponse) Reset()                    { *m = CreateBuildResponse{} }
func (m *CreateBuildResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateBuildResponse) ProtoMessage()               {}
func (*CreateBuildResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateBuildResponse) GetBuildStoreid() string {
	if m != nil {
		return m.BuildStoreid
	}
	return ""
}

type UploadSlotRequest struct {
	BuildStoreid string `protobuf:"bytes,1,opt,name=BuildStoreid,json=buildStoreid" json:"BuildStoreid,omitempty"`
	Filename     string `protobuf:"bytes,2,opt,name=Filename,json=filename" json:"Filename,omitempty"`
}

func (m *UploadSlotRequest) Reset()                    { *m = UploadSlotRequest{} }
func (m *UploadSlotRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadSlotRequest) ProtoMessage()               {}
func (*UploadSlotRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UploadSlotRequest) GetBuildStoreid() string {
	if m != nil {
		return m.BuildStoreid
	}
	return ""
}

func (m *UploadSlotRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type UploadSlotResponse struct {
	Token string `protobuf:"bytes,1,opt,name=Token,json=token" json:"Token,omitempty"`
	Port  int32  `protobuf:"varint,2,opt,name=Port,json=port" json:"Port,omitempty"`
}

func (m *UploadSlotResponse) Reset()                    { *m = UploadSlotResponse{} }
func (m *UploadSlotResponse) String() string            { return proto.CompactTextString(m) }
func (*UploadSlotResponse) ProtoMessage()               {}
func (*UploadSlotResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UploadSlotResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UploadSlotResponse) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type UploadDoneRequest struct {
	BuildStoreid string `protobuf:"bytes,1,opt,name=BuildStoreid,json=buildStoreid" json:"BuildStoreid,omitempty"`
}

func (m *UploadDoneRequest) Reset()                    { *m = UploadDoneRequest{} }
func (m *UploadDoneRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadDoneRequest) ProtoMessage()               {}
func (*UploadDoneRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UploadDoneRequest) GetBuildStoreid() string {
	if m != nil {
		return m.BuildStoreid
	}
	return ""
}

type UploadDoneResponse struct {
}

func (m *UploadDoneResponse) Reset()                    { *m = UploadDoneResponse{} }
func (m *UploadDoneResponse) String() string            { return proto.CompactTextString(m) }
func (*UploadDoneResponse) ProtoMessage()               {}
func (*UploadDoneResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type RepoEntry struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Type int32  `protobuf:"varint,2,opt,name=Type,json=type" json:"Type,omitempty"`
}

func (m *RepoEntry) Reset()                    { *m = RepoEntry{} }
func (m *RepoEntry) String() string            { return proto.CompactTextString(m) }
func (*RepoEntry) ProtoMessage()               {}
func (*RepoEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RepoEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RepoEntry) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ListReposRequest struct {
}

func (m *ListReposRequest) Reset()                    { *m = ListReposRequest{} }
func (m *ListReposRequest) String() string            { return proto.CompactTextString(m) }
func (*ListReposRequest) ProtoMessage()               {}
func (*ListReposRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ListReposResponse struct {
	Entries []*RepoEntry `protobuf:"bytes,1,rep,name=Entries,json=entries" json:"Entries,omitempty"`
}

func (m *ListReposResponse) Reset()                    { *m = ListReposResponse{} }
func (m *ListReposResponse) String() string            { return proto.CompactTextString(m) }
func (*ListReposResponse) ProtoMessage()               {}
func (*ListReposResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListReposResponse) GetEntries() []*RepoEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type ListBranchesRequest struct {
	Repository string `protobuf:"bytes,1,opt,name=Repository,json=repository" json:"Repository,omitempty"`
}

func (m *ListBranchesRequest) Reset()                    { *m = ListBranchesRequest{} }
func (m *ListBranchesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBranchesRequest) ProtoMessage()               {}
func (*ListBranchesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListBranchesRequest) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

type ListBranchesResponse struct {
	Entries []*RepoEntry `protobuf:"bytes,1,rep,name=Entries,json=entries" json:"Entries,omitempty"`
}

func (m *ListBranchesResponse) Reset()                    { *m = ListBranchesResponse{} }
func (m *ListBranchesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListBranchesResponse) ProtoMessage()               {}
func (*ListBranchesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListBranchesResponse) GetEntries() []*RepoEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type ListVersionsRequest struct {
	Repository string `protobuf:"bytes,1,opt,name=Repository,json=repository" json:"Repository,omitempty"`
	Branch     string `protobuf:"bytes,2,opt,name=Branch,json=branch" json:"Branch,omitempty"`
}

func (m *ListVersionsRequest) Reset()                    { *m = ListVersionsRequest{} }
func (m *ListVersionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListVersionsRequest) ProtoMessage()               {}
func (*ListVersionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ListVersionsRequest) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *ListVersionsRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

type ListVersionsResponse struct {
	Entries []*RepoEntry `protobuf:"bytes,1,rep,name=Entries,json=entries" json:"Entries,omitempty"`
}

func (m *ListVersionsResponse) Reset()                    { *m = ListVersionsResponse{} }
func (m *ListVersionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListVersionsResponse) ProtoMessage()               {}
func (*ListVersionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ListVersionsResponse) GetEntries() []*RepoEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type ListFilesRequest struct {
	Repository string `protobuf:"bytes,1,opt,name=Repository,json=repository" json:"Repository,omitempty"`
	Branch     string `protobuf:"bytes,2,opt,name=Branch,json=branch" json:"Branch,omitempty"`
	Version    string `protobuf:"bytes,3,opt,name=Version,json=version" json:"Version,omitempty"`
}

func (m *ListFilesRequest) Reset()                    { *m = ListFilesRequest{} }
func (m *ListFilesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListFilesRequest) ProtoMessage()               {}
func (*ListFilesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ListFilesRequest) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *ListFilesRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *ListFilesRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type ListFilesResponse struct {
	Entries []*RepoEntry `protobuf:"bytes,1,rep,name=Entries,json=entries" json:"Entries,omitempty"`
}

func (m *ListFilesResponse) Reset()                    { *m = ListFilesResponse{} }
func (m *ListFilesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListFilesResponse) ProtoMessage()               {}
func (*ListFilesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListFilesResponse) GetEntries() []*RepoEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateBuildRequest)(nil), "buildrepo.CreateBuildRequest")
	proto.RegisterType((*CreateBuildResponse)(nil), "buildrepo.CreateBuildResponse")
	proto.RegisterType((*UploadSlotRequest)(nil), "buildrepo.UploadSlotRequest")
	proto.RegisterType((*UploadSlotResponse)(nil), "buildrepo.UploadSlotResponse")
	proto.RegisterType((*UploadDoneRequest)(nil), "buildrepo.UploadDoneRequest")
	proto.RegisterType((*UploadDoneResponse)(nil), "buildrepo.UploadDoneResponse")
	proto.RegisterType((*RepoEntry)(nil), "buildrepo.RepoEntry")
	proto.RegisterType((*ListReposRequest)(nil), "buildrepo.ListReposRequest")
	proto.RegisterType((*ListReposResponse)(nil), "buildrepo.ListReposResponse")
	proto.RegisterType((*ListBranchesRequest)(nil), "buildrepo.ListBranchesRequest")
	proto.RegisterType((*ListBranchesResponse)(nil), "buildrepo.ListBranchesResponse")
	proto.RegisterType((*ListVersionsRequest)(nil), "buildrepo.ListVersionsRequest")
	proto.RegisterType((*ListVersionsResponse)(nil), "buildrepo.ListVersionsResponse")
	proto.RegisterType((*ListFilesRequest)(nil), "buildrepo.ListFilesRequest")
	proto.RegisterType((*ListFilesResponse)(nil), "buildrepo.ListFilesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BuildRepoManager service

type BuildRepoManagerClient interface {
	CreateBuild(ctx context.Context, in *CreateBuildRequest, opts ...grpc.CallOption) (*CreateBuildResponse, error)
	GetUploadSlot(ctx context.Context, in *UploadSlotRequest, opts ...grpc.CallOption) (*UploadSlotResponse, error)
	UploadsComplete(ctx context.Context, in *UploadDoneRequest, opts ...grpc.CallOption) (*UploadDoneResponse, error)
	ListRepos(ctx context.Context, in *ListReposRequest, opts ...grpc.CallOption) (*ListReposResponse, error)
	ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error)
	ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (*ListVersionsResponse, error)
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
}

type buildRepoManagerClient struct {
	cc *grpc.ClientConn
}

func NewBuildRepoManagerClient(cc *grpc.ClientConn) BuildRepoManagerClient {
	return &buildRepoManagerClient{cc}
}

func (c *buildRepoManagerClient) CreateBuild(ctx context.Context, in *CreateBuildRequest, opts ...grpc.CallOption) (*CreateBuildResponse, error) {
	out := new(CreateBuildResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/CreateBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) GetUploadSlot(ctx context.Context, in *UploadSlotRequest, opts ...grpc.CallOption) (*UploadSlotResponse, error) {
	out := new(UploadSlotResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/GetUploadSlot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) UploadsComplete(ctx context.Context, in *UploadDoneRequest, opts ...grpc.CallOption) (*UploadDoneResponse, error) {
	out := new(UploadDoneResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/UploadsComplete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) ListRepos(ctx context.Context, in *ListReposRequest, opts ...grpc.CallOption) (*ListReposResponse, error) {
	out := new(ListReposResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/ListRepos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error) {
	out := new(ListBranchesResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/ListBranches", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (*ListVersionsResponse, error) {
	out := new(ListVersionsResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/ListVersions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/ListFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BuildRepoManager service

type BuildRepoManagerServer interface {
	CreateBuild(context.Context, *CreateBuildRequest) (*CreateBuildResponse, error)
	GetUploadSlot(context.Context, *UploadSlotRequest) (*UploadSlotResponse, error)
	UploadsComplete(context.Context, *UploadDoneRequest) (*UploadDoneResponse, error)
	ListRepos(context.Context, *ListReposRequest) (*ListReposResponse, error)
	ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesResponse, error)
	ListVersions(context.Context, *ListVersionsRequest) (*ListVersionsResponse, error)
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
}

func RegisterBuildRepoManagerServer(s *grpc.Server, srv BuildRepoManagerServer) {
	s.RegisterService(&_BuildRepoManager_serviceDesc, srv)
}

func _BuildRepoManager_CreateBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).CreateBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/CreateBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).CreateBuild(ctx, req.(*CreateBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_GetUploadSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).GetUploadSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/GetUploadSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).GetUploadSlot(ctx, req.(*UploadSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_UploadsComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).UploadsComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/UploadsComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).UploadsComplete(ctx, req.(*UploadDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_ListRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReposRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).ListRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/ListRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).ListRepos(ctx, req.(*ListReposRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_ListBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).ListBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/ListBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).ListBranches(ctx, req.(*ListBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_ListVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).ListVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/ListVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).ListVersions(ctx, req.(*ListVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BuildRepoManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "buildrepo.BuildRepoManager",
	HandlerType: (*BuildRepoManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBuild",
			Handler:    _BuildRepoManager_CreateBuild_Handler,
		},
		{
			MethodName: "GetUploadSlot",
			Handler:    _BuildRepoManager_GetUploadSlot_Handler,
		},
		{
			MethodName: "UploadsComplete",
			Handler:    _BuildRepoManager_UploadsComplete_Handler,
		},
		{
			MethodName: "ListRepos",
			Handler:    _BuildRepoManager_ListRepos_Handler,
		},
		{
			MethodName: "ListBranches",
			Handler:    _BuildRepoManager_ListBranches_Handler,
		},
		{
			MethodName: "ListVersions",
			Handler:    _BuildRepoManager_ListVersions_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _BuildRepoManager_ListFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/build-repo.proto",
}

func init() { proto.RegisterFile("proto/build-repo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x55, 0x4d, 0x6f, 0xda, 0x40,
	0x10, 0x15, 0x89, 0x09, 0xf1, 0x84, 0xaa, 0xc9, 0x06, 0x45, 0x96, 0x4b, 0x28, 0xda, 0x13, 0x97,
	0x82, 0x94, 0xa8, 0xaa, 0x7a, 0xe9, 0x21, 0x50, 0xa2, 0x48, 0x90, 0x56, 0x26, 0xed, 0xdd, 0xc0,
	0x94, 0x5a, 0x35, 0x5e, 0x77, 0xbd, 0xa9, 0xc4, 0xbf, 0xe9, 0x4f, 0xe8, 0x4f, 0xac, 0xf6, 0xc3,
	0xb0, 0x60, 0x90, 0x28, 0x3d, 0xce, 0x9b, 0x9d, 0x37, 0x6f, 0xe2, 0xf7, 0x02, 0x5c, 0xa5, 0x9c,
	0x09, 0xd6, 0x19, 0x3f, 0x47, 0xf1, 0xf4, 0x0d, 0xc7, 0x94, 0xb5, 0x15, 0x40, 0x5c, 0x85, 0x48,
	0xc0, 0xaf, 0xcf, 0x18, 0x9b, 0xc5, 0xd8, 0x09, 0xd3, 0xa8, 0x13, 0x26, 0x09, 0x13, 0xa1, 0x88,
	0x58, 0x92, 0xe9, 0x87, 0xf4, 0x77, 0x09, 0x48, 0x97, 0x63, 0x28, 0xf0, 0x4e, 0x4e, 0x04, 0xf8,
	0xf3, 0x19, 0x33, 0x41, 0x1a, 0x00, 0x01, 0xa6, 0x2c, 0x8b, 0x04, 0xe3, 0x0b, 0xaf, 0xd4, 0x2c,
	0xb5, 0xdc, 0x00, 0xf8, 0x12, 0x21, 0x3e, 0x9c, 0x76, 0xd9, 0x7c, 0x1e, 0x89, 0x87, 0x9e, 0x77,
	0xa4, 0xba, 0xa7, 0x13, 0x53, 0x93, 0x2b, 0x38, 0xb9, 0xe3, 0x61, 0x32, 0xf9, 0xee, 0x1d, 0xab,
	0xce, 0xc9, 0x58, 0x55, 0xc4, 0x83, 0x8a, 0xda, 0xf1, 0xd0, 0xf3, 0x9c, 0x66, 0xa9, 0xe5, 0x04,
	0x95, 0xb1, 0x2e, 0x49, 0x1d, 0x5c, 0xcd, 0x36, 0x1c, 0xdd, 0x7b, 0x65, 0x35, 0xe4, 0x4e, 0x72,
	0x80, 0xbe, 0x87, 0xcb, 0x35, 0x85, 0x59, 0xca, 0x92, 0x0c, 0x09, 0x85, 0xaa, 0x02, 0x46, 0x82,
	0x71, 0x8c, 0xa6, 0x46, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x04, 0x17, 0x5f, 0xd2, 0x98, 0x85, 0xd3,
	0x51, 0xcc, 0x44, 0x7e, 0xdb, 0x1e, 0x83, 0xf2, 0xbe, 0x7e, 0x14, 0x63, 0x12, 0xce, 0x31, 0xbf,
	0xef, 0x9b, 0xa9, 0xe9, 0x07, 0x20, 0x36, 0xa9, 0x91, 0x53, 0x83, 0xf2, 0x13, 0xfb, 0x81, 0x89,
	0xa1, 0x2b, 0x0b, 0x59, 0x10, 0x02, 0xce, 0x67, 0xc6, 0x85, 0xe2, 0x28, 0x07, 0x4e, 0xca, 0xb8,
	0xa0, 0xef, 0x72, 0x51, 0x3d, 0x96, 0xe0, 0x3f, 0x88, 0xa2, 0xb5, 0x7c, 0xb1, 0x1e, 0xd4, 0x8b,
	0xe9, 0x2d, 0xb8, 0xf2, 0x53, 0x7d, 0x4c, 0x04, 0x5f, 0xc8, 0x7d, 0x8f, 0x52, 0xb3, 0x1e, 0x77,
	0xa4, 0x5e, 0x89, 0x3d, 0x2d, 0x52, 0xcc, 0x35, 0x88, 0x45, 0x8a, 0x94, 0xc0, 0xf9, 0x20, 0xca,
	0x84, 0xfa, 0xc6, 0x46, 0x02, 0xed, 0xc2, 0x85, 0x85, 0x99, 0xb3, 0xda, 0x50, 0x91, 0xcc, 0x11,
	0x66, 0x5e, 0xa9, 0x79, 0xdc, 0x3a, 0xbb, 0xa9, 0xb5, 0x97, 0xd6, 0x6a, 0x2f, 0xf7, 0x06, 0x15,
	0xd4, 0x8f, 0xe8, 0x5b, 0xb8, 0x94, 0x24, 0xda, 0x00, 0x98, 0xed, 0xe9, 0x27, 0xda, 0x87, 0xda,
	0xfa, 0xd8, 0x81, 0xeb, 0x87, 0x7a, 0xfd, 0x57, 0xe4, 0x99, 0x34, 0xf9, 0xbe, 0x76, 0x5e, 0x59,
	0xf6, 0xc8, 0xb6, 0x6c, 0x2e, 0x6b, 0x45, 0x77, 0xa0, 0xac, 0xa9, 0xfe, 0x73, 0x4b, 0x4b, 0xfd,
	0xaf, 0x26, 0x19, 0x23, 0xa3, 0xc7, 0xe4, 0xab, 0xf2, 0x4b, 0x97, 0xf9, 0x07, 0x34, 0x5b, 0x0e,
	0x93, 0x7a, 0xf3, 0xc7, 0x81, 0x73, 0x13, 0xb4, 0x94, 0x0d, 0xc3, 0x24, 0x9c, 0x21, 0x27, 0x03,
	0x38, 0xb3, 0x22, 0x48, 0xae, 0x2d, 0x8a, 0xe2, 0x3f, 0x0f, 0xbf, 0xb1, 0xab, 0x6d, 0x24, 0x0d,
	0xe0, 0xc5, 0x3d, 0x8a, 0x55, 0x86, 0x48, 0xdd, 0x1a, 0x28, 0xe4, 0xd5, 0xbf, 0xde, 0xd1, 0x35,
	0x6c, 0x8f, 0xf0, 0x52, 0xa3, 0x59, 0x97, 0xcd, 0xd3, 0x18, 0x05, 0x6e, 0xe1, 0xb3, 0xa2, 0xb6,
	0x85, 0xcf, 0xce, 0x13, 0xe9, 0x83, 0xbb, 0x8c, 0x01, 0x79, 0x65, 0xbd, 0xdd, 0x0c, 0x8c, 0x5f,
	0xdf, 0xde, 0x34, 0x3c, 0x9f, 0xa0, 0x6a, 0x5b, 0x9a, 0x34, 0x36, 0x5e, 0x6f, 0x44, 0xc4, 0x7f,
	0xbd, 0xb3, 0xbf, 0x4e, 0x98, 0x9b, 0xb1, 0x40, 0xb8, 0x61, 0xfa, 0x02, 0x61, 0xc1, 0xc5, 0xe6,
	0x52, 0xe5, 0x97, 0xc2, 0xa5, 0xb6, 0x57, 0x0b, 0x97, 0xae, 0x59, 0x6c, 0x7c, 0xa2, 0x7e, 0x4a,
	0x6e, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xca, 0xc2, 0x33, 0xcf, 0x8d, 0x06, 0x00, 0x00,
}
