// Code generated by protoc-gen-go.
// source: proto/build-repo.proto
// DO NOT EDIT!

/*
Package vpnmgr is a generated protocol buffer package.

It is generated from these files:
	proto/build-repo.proto

It has these top-level messages:
	CreateRequest
	CreateResponse
	PingRequest
	PingResponse
*/
package vpnmgr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// import "google/protobuf/empty.proto";
// import "google/protobuf/duration.proto";
// import "examples/sub/message.proto";
// import "examples/sub2/message.proto";
// import "google/protobuf/timestamp.proto";
type CreateRequest struct {
	Name   string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Access string `protobuf:"bytes,2,opt,name=Access,json=access" json:"Access,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRequest) GetAccess() string {
	if m != nil {
		return m.Access
	}
	return ""
}

type CreateResponse struct {
	Certificate string `protobuf:"bytes,1,opt,name=Certificate,json=certificate" json:"Certificate,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateResponse) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type PingResponse struct {
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*CreateRequest)(nil), "vpnmgr.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "vpnmgr.CreateResponse")
	proto.RegisterType((*PingRequest)(nil), "vpnmgr.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "vpnmgr.PingResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VpnManager service

type VpnManagerClient interface {
	CreateVpn(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type vpnManagerClient struct {
	cc *grpc.ClientConn
}

func NewVpnManagerClient(cc *grpc.ClientConn) VpnManagerClient {
	return &vpnManagerClient{cc}
}

func (c *vpnManagerClient) CreateVpn(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/vpnmgr.VpnManager/CreateVpn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnManagerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/vpnmgr.VpnManager/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VpnManager service

type VpnManagerServer interface {
	CreateVpn(context.Context, *CreateRequest) (*CreateResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

func RegisterVpnManagerServer(s *grpc.Server, srv VpnManagerServer) {
	s.RegisterService(&_VpnManager_serviceDesc, srv)
}

func _VpnManager_CreateVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnManagerServer).CreateVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpnmgr.VpnManager/CreateVpn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnManagerServer).CreateVpn(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnManager_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnManagerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpnmgr.VpnManager/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnManagerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VpnManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vpnmgr.VpnManager",
	HandlerType: (*VpnManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVpn",
			Handler:    _VpnManager_CreateVpn_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _VpnManager_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/build-repo.proto",
}

func init() { proto.RegisterFile("proto/build-repo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x90, 0x41, 0x4a, 0x33, 0x31,
	0x14, 0xc7, 0x99, 0x32, 0x0c, 0xf4, 0xcd, 0xd7, 0x7e, 0x18, 0x75, 0x2c, 0x43, 0x17, 0x25, 0x2b,
	0x37, 0x4e, 0xb0, 0x2e, 0x5d, 0x49, 0x77, 0x82, 0x22, 0x5d, 0x74, 0x29, 0xa4, 0xe3, 0x33, 0x04,
	0x3a, 0x2f, 0x31, 0x49, 0x7b, 0x00, 0xaf, 0xe0, 0x65, 0xbc, 0x87, 0x57, 0xf0, 0x20, 0xd2, 0x49,
	0x07, 0xa7, 0xee, 0xf2, 0x7e, 0x49, 0x7e, 0xff, 0x7f, 0x02, 0x85, 0x75, 0x26, 0x18, 0xb1, 0xde,
	0xea, 0xcd, 0xcb, 0x95, 0x43, 0x6b, 0xaa, 0x16, 0xb0, 0x6c, 0x67, 0xa9, 0x51, 0xae, 0x9c, 0x2a,
	0x63, 0xd4, 0x06, 0x85, 0xb4, 0x5a, 0x48, 0x22, 0x13, 0x64, 0xd0, 0x86, 0x7c, 0x3c, 0xc5, 0x6f,
	0x61, 0xb4, 0x70, 0x28, 0x03, 0x2e, 0xf1, 0x6d, 0x8b, 0x3e, 0x30, 0x06, 0xe9, 0xa3, 0x6c, 0x70,
	0x92, 0xcc, 0x92, 0xcb, 0xe1, 0x32, 0x25, 0xd9, 0x20, 0x2b, 0x20, 0xbb, 0xab, 0x6b, 0xf4, 0x7e,
	0x32, 0x68, 0x69, 0x26, 0xdb, 0x89, 0xcf, 0x61, 0xdc, 0x5d, 0xf6, 0xd6, 0x90, 0x47, 0x36, 0x83,
	0x7c, 0x81, 0x2e, 0xe8, 0x57, 0x5d, 0xcb, 0xd0, 0x49, 0xf2, 0xfa, 0x17, 0xf1, 0x11, 0xe4, 0x4f,
	0x9a, 0xd4, 0x21, 0x8e, 0x8f, 0xe1, 0x5f, 0x1c, 0xa3, 0x60, 0xfe, 0x99, 0x00, 0xac, 0x2c, 0x3d,
	0x48, 0x92, 0x0a, 0x1d, 0x7b, 0x86, 0x61, 0x4c, 0x58, 0x59, 0x62, 0xe7, 0x55, 0x7c, 0x52, 0x75,
	0xd4, 0xb8, 0x2c, 0xfe, 0xe2, 0xa8, 0xe2, 0xfc, 0xfd, 0xeb, 0xfb, 0x63, 0x30, 0x65, 0xa5, 0x88,
	0xfb, 0x62, 0x77, 0xbd, 0x5f, 0x89, 0x5e, 0x1b, 0x76, 0x0f, 0xe9, 0x3e, 0x9e, 0x9d, 0x76, 0x8e,
	0x5e, 0xb7, 0xf2, 0xec, 0x18, 0x1e, 0xb4, 0x17, 0xad, 0xf6, 0x84, 0xfd, 0xef, 0x69, 0xad, 0x26,
	0xb5, 0xce, 0xda, 0x1f, 0xbd, 0xf9, 0x09, 0x00, 0x00, 0xff, 0xff, 0x53, 0x6b, 0x9e, 0x23, 0x91,
	0x01, 0x00, 0x00,
}
